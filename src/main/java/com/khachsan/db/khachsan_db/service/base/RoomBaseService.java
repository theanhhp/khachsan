/* 
* Generated by
* 
*      _____ _          __  __      _     _
*     / ____| |        / _|/ _|    | |   | |
*    | (___ | | ____ _| |_| |_ ___ | | __| | ___ _ __
*     \___ \| |/ / _` |  _|  _/ _ \| |/ _` |/ _ \ '__|
*     ____) |   < (_| | | | || (_) | | (_| |  __/ |
*    |_____/|_|\_\__,_|_| |_| \___/|_|\__,_|\___|_|
*
* The code generator that works in many programming languages
*
*			https://www.skaffolder.com
*
*
* You can generate the code from the command-line
*       https://npmjs.com/package/skaffolder-cli
*
*       npm install -g skaffodler-cli
*
*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *
*
* To remove this comment please upgrade your plan here: 
*      https://app.skaffolder.com/#!/upgrade
*
* Or get up to 70% discount sharing your unique link:
*       https://app.skaffolder.com/#!/register?friend=5dbfae239ef7a1181f8e04d2
*
* You will get 10% discount for each one of your friends
* 
*/
package com.khachsan.db.khachsan_db.service.base;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.sql.DataSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.core.simple.SimpleJdbcInsert;
import org.springframework.stereotype.Service;

import com.khachsan.db.khachsan_db.entity.Room;
import com.khachsan.db.khachsan_db.service.RoomService;

//IMPORT RELATIONS
import com.khachsan.db.khachsan_db.entity.Costomer;
import com.khachsan.db.khachsan_db.entity.Room;
import com.khachsan.db.khachsan_db.entity.Room;
import com.khachsan.db.khachsan_db.entity.Bill;

@Service
public class RoomBaseService {

	private static NamedParameterJdbcTemplate jdbcTemplate;
	
		@Autowired
	public void setDataSource(DataSource dataSource) {
		jdbcTemplate = new NamedParameterJdbcTemplate(dataSource);
	}
	


    //CRUD METHODS
    
    //CRUD - CREATE
    	
	public Room insert(Room obj) {
		Long id = jdbcTemplate.queryForObject("select max(_id) from `room`", new MapSqlParameterSource(), Long.class);
		obj.set_id(id == null ? 1 : id + 1);
		String sql = "INSERT INTO `room` (`_id`, `employessid`,`idservise`,`note`,`roomname`,`roomstauts`,`roomtype`,`salary`,`coderoom`,`roomid`) VALUES (:id,:employessid,:idservise,:note,:roomname,:roomstauts,:roomtype,:salary, :coderoom , :roomid )";
			SqlParameterSource parameters = new MapSqlParameterSource()
		    .addValue("id", obj.get_id())
			.addValue("employessid", obj.getEmployessid())
			.addValue("idservise", obj.getIdservise())
			.addValue("note", obj.getNote())
			.addValue("roomname", obj.getRoomname())
			.addValue("roomstauts", obj.getRoomstauts())
			.addValue("roomtype", obj.getRoomtype())
			.addValue("salary", obj.getSalary())
			.addValue("coderoom", obj.getCoderoom())
			.addValue("roomid", obj.getRoomid());
		
		jdbcTemplate.update(sql, parameters);
		return obj;
	}
	
    	
    //CRUD - REMOVE
    
	public void delete(Long id) {
		String sql = "DELETE FROM `room` WHERE `_id`=:id";
		SqlParameterSource parameters = new MapSqlParameterSource()
			.addValue("id", id);
		
		jdbcTemplate.update(sql, parameters);
	}

    	
    //CRUD - FIND BY Coderoom
    	
	public List<Room> findBycoderoom(Long idcoderoom) {
		
		String sql = "select * from `Room` WHERE `coderoom` = :idcoderoom";
		
	    SqlParameterSource parameters = new MapSqlParameterSource()
		.addValue("idcoderoom", idcoderoom);
	    
	    return jdbcTemplate.query(sql, parameters, new BeanPropertyRowMapper(Room.class));
	}
    	
    //CRUD - FIND BY Roomid
    	
	public List<Room> findByroomid(Long idroomid) {
		
		String sql = "select * from `Room` WHERE `roomid` = :idroomid";
		
	    SqlParameterSource parameters = new MapSqlParameterSource()
		.addValue("idroomid", idroomid);
	    
	    return jdbcTemplate.query(sql, parameters, new BeanPropertyRowMapper(Room.class));
	}
    	
    //CRUD - FIND BY Roomname
    	
	public List<Room> findByroomname(Long idroomname) {
		
		String sql = "select * from `Room` WHERE `roomname` = :idroomname";
		
	    SqlParameterSource parameters = new MapSqlParameterSource()
		.addValue("idroomname", idroomname);
	    
	    return jdbcTemplate.query(sql, parameters, new BeanPropertyRowMapper(Room.class));
	}
    	
    //CRUD - GET ONE
    	
	public Room get(Long id) {
	    
		String sql = "select * from `room` where `_id` = :id";
		
	    SqlParameterSource parameters = new MapSqlParameterSource()
			.addValue("id", id);
	    
	    return (Room) jdbcTemplate.queryForObject(sql, parameters, new BeanPropertyRowMapper(Room.class));
	}


    	
        	
    //CRUD - GET LIST
    	
	public List<Room> getList() {
	    
		String sql = "select * from `room`";
		
	    SqlParameterSource parameters = new MapSqlParameterSource();
	    return jdbcTemplate.query(sql, parameters, new BeanPropertyRowMapper(Room.class));
	    
	    
	}

    	
    //CRUD - EDIT
    	
	public Room update(Room obj, Long id) {

		String sql = "UPDATE `room` SET `employessid` = :employessid,`idservise` = :idservise,`note` = :note,`roomname` = :roomname,`roomstauts` = :roomstauts,`roomtype` = :roomtype,`salary` = :salary , `coderoom` = :coderoom , `roomid` = :roomid  WHERE `_id`=:id";
		SqlParameterSource parameters = new MapSqlParameterSource()
			.addValue("id", id)
			.addValue("employessid", obj.getEmployessid())
			.addValue("idservise", obj.getIdservise())
			.addValue("note", obj.getNote())
			.addValue("roomname", obj.getRoomname())
			.addValue("roomstauts", obj.getRoomstauts())
			.addValue("roomtype", obj.getRoomtype())
			.addValue("salary", obj.getSalary())
			.addValue("coderoom", obj.getCoderoom())
			.addValue("roomid", obj.getRoomid());
		jdbcTemplate.update(sql, parameters);
	    return obj;
	}
	
    	
    
    
    
        
        
        
    

    
    /*
     * CUSTOM SERVICES
     * 
     *	These services will be overwritten and implemented in roomService.java
     */
    

}
