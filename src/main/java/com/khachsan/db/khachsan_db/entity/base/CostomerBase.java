/* 
* Generated by
* 
*      _____ _          __  __      _     _
*     / ____| |        / _|/ _|    | |   | |
*    | (___ | | ____ _| |_| |_ ___ | | __| | ___ _ __
*     \___ \| |/ / _` |  _|  _/ _ \| |/ _` |/ _ \ '__|
*     ____) |   < (_| | | | || (_) | | (_| |  __/ |
*    |_____/|_|\_\__,_|_| |_| \___/|_|\__,_|\___|_|
*
* The code generator that works in many programming languages
*
*			https://www.skaffolder.com
*
*
* You can generate the code from the command-line
*       https://npmjs.com/package/skaffolder-cli
*
*       npm install -g skaffodler-cli
*
*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *
*
* To remove this comment please upgrade your plan here: 
*      https://app.skaffolder.com/#!/upgrade
*
* Or get up to 70% discount sharing your unique link:
*       https://app.skaffolder.com/#!/register?friend=5dbfae239ef7a1181f8e04d2
*
* You will get 10% discount for each one of your friends
* 
*/
package com.khachsan.db.khachsan_db.entity.base;

/**
 * 
 * 
  _____                      _              _ _ _     _   _     _        __ _ _      
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |     
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___ 
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|
 
                                                                                   
 * DO NOT EDIT THIS FILE!! 
 *
 *  FOR CUSTOMIZE CostomerBase PLEASE EDIT ../Costomer.java
 * 
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER CODE GENERATION --
 * 
 */
 

/**
 * This is the model of Costomer object
 * 
 */
 
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.math.BigDecimal;


import org.springframework.jdbc.core.RowMapper;
import com.khachsan.db.khachsan_db.entity.Costomer;

public class CostomerBase implements RowMapper<Costomer>{
	
	private Long _id;
	
	// Attributes
    private Double age;
    private Double card;
    private Integer coderoom;
    private String gender;
    private String namcostomer;
    private String nationality;
    private Double phonenumber;
	
	
	
	@Override
	public Costomer mapRow(ResultSet rs, int rowNum) throws SQLException {
		
		Costomer obj = new Costomer();
		try {
			obj.set_id(rs.getLong("id"));
			obj.setAge(rs.getDouble("age"));
			obj.setCard(rs.getDouble("card"));
			obj.setCoderoom(rs.getInt("coderoom"));
			obj.setGender(rs.getString("gender"));
			obj.setNamcostomer(rs.getString("namcostomer"));
			obj.setNationality(rs.getString("nationality"));
			obj.setPhonenumber(rs.getDouble("phonenumber"));
			
        	
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		return obj;
	}


	public Long get_id() {
		return _id;
	}

	public void set_id(Long _id) {
		this._id = _id;
	}
	
	public Double getAge() {
		return age;
	}


	public void setAge(Double age) {
		this.age = age;
	}
	public Double getCard() {
		return card;
	}


	public void setCard(Double card) {
		this.card = card;
	}
	public Integer getCoderoom() {
		return coderoom;
	}


	public void setCoderoom(Integer coderoom) {
		this.coderoom = coderoom;
	}
	public String getGender() {
		return gender;
	}


	public void setGender(String gender) {
		this.gender = gender;
	}
	public String getNamcostomer() {
		return namcostomer;
	}


	public void setNamcostomer(String namcostomer) {
		this.namcostomer = namcostomer;
	}
	public String getNationality() {
		return nationality;
	}


	public void setNationality(String nationality) {
		this.nationality = nationality;
	}
	public Double getPhonenumber() {
		return phonenumber;
	}


	public void setPhonenumber(Double phonenumber) {
		this.phonenumber = phonenumber;
	}
	
    
    
    
    
}