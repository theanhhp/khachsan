/* 
* Generated by
* 
*      _____ _          __  __      _     _
*     / ____| |        / _|/ _|    | |   | |
*    | (___ | | ____ _| |_| |_ ___ | | __| | ___ _ __
*     \___ \| |/ / _` |  _|  _/ _ \| |/ _` |/ _ \ '__|
*     ____) |   < (_| | | | || (_) | | (_| |  __/ |
*    |_____/|_|\_\__,_|_| |_| \___/|_|\__,_|\___|_|
*
* The code generator that works in many programming languages
*
*			https://www.skaffolder.com
*
*
* You can generate the code from the command-line
*       https://npmjs.com/package/skaffolder-cli
*
*       npm install -g skaffodler-cli
*
*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *
*
* To remove this comment please upgrade your plan here: 
*      https://app.skaffolder.com/#!/upgrade
*
* Or get up to 70% discount sharing your unique link:
*       https://app.skaffolder.com/#!/register?friend=5dbfae239ef7a1181f8e04d2
*
* You will get 10% discount for each one of your friends
* 
*/
package com.khachsan.controller.base;

import java.util.List;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import java.util.ArrayList;
import org.springframework.security.access.annotation.Secured;
import org.springframework.beans.factory.annotation.Autowired;
import com.khachsan.db.khachsan_db.service.CostomerService;
import com.khachsan.db.khachsan_db.entity.Costomer;

//IMPORT RELATIONS
import com.khachsan.db.khachsan_db.entity.Costomer;

public class CostomerBaseController {
    
    @Autowired
	CostomerService costomerService;



//CRUD METHODS


    //CRUD - CREATE
    @Secured({ "ROLE_PRIVATE_USER" })
		@RequestMapping(value = "/costomer", method = RequestMethod.POST, headers = "Accept=application/json")
	public Costomer insert(@RequestBody Costomer obj) {
		Costomer result = costomerService.insert(obj);

	    
		
		return result;
	}

	
    //CRUD - REMOVE
    @Secured({ "ROLE_PRIVATE_USER" })
	@RequestMapping(value = "/costomer/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
	public void delete(@PathVariable("id") Long id) {
		costomerService.delete(id);
	}
	

    //CRUD - FIND BY Namcostomer
    @Secured({ "ROLE_PRIVATE_USER" })
	@RequestMapping(value = "/costomer/findBynamcostomer/{key}", method = RequestMethod.GET, headers = "Accept=application/json")
	public List<Costomer> findBynamcostomer(@PathVariable("key") Long idnamcostomer) {
		List<Costomer> list = costomerService.findBynamcostomer(idnamcostomer);
		return list;
	}
	
    //CRUD - GET ONE
    @Secured({ "ROLE_PRIVATE_USER" })
	@RequestMapping(value = "/costomer/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
	public Costomer get(@PathVariable Long id) {
		Costomer obj = costomerService.get(id);
		
		
		
		return obj;
	}
	
	
    //CRUD - GET LIST
    @Secured({ "ROLE_PRIVATE_USER" })
	@RequestMapping(value = "/costomer", method = RequestMethod.GET, headers = "Accept=application/json")
	public List<Costomer> getList() {
		return costomerService.getList();
	}
	
	

    //CRUD - EDIT
    @Secured({ "ROLE_PRIVATE_USER" })
	@RequestMapping(value = "/costomer/{id}", method = RequestMethod.POST, headers = "Accept=application/json")
	public Costomer update(@RequestBody Costomer obj, @PathVariable("id") Long id) {
		Costomer result = costomerService.update(obj, id);

	    
		
		return result;
	}
	


/*
 * CUSTOM SERVICES
 * 
 *	These services will be overwritten and implemented in  Custom.js
 */


	
}
