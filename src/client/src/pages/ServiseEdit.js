/* 
* Generated by
* 
*      _____ _          __  __      _     _
*     / ____| |        / _|/ _|    | |   | |
*    | (___ | | ____ _| |_| |_ ___ | | __| | ___ _ __
*     \___ \| |/ / _` |  _|  _/ _ \| |/ _` |/ _ \ '__|
*     ____) |   < (_| | | | || (_) | | (_| |  __/ |
*    |_____/|_|\_\__,_|_| |_| \___/|_|\__,_|\___|_|
*
* The code generator that works in many programming languages
*
*			https://www.skaffolder.com
*
*
* You can generate the code from the command-line
*       https://npmjs.com/package/skaffolder-cli
*
*       npm install -g skaffodler-cli
*
*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *
*
* To remove this comment please upgrade your plan here: 
*      https://app.skaffolder.com/#!/upgrade
*
* Or get up to 70% discount sharing your unique link:
*       https://app.skaffolder.com/#!/register?friend=5dbfae239ef7a1181f8e04d2
*
* You will get 10% discount for each one of your friends
* 
*/
// Dependencies
import React, { Component } from "react";
import { Link } from "react-router-dom";
import Utils from "../utils/utils";

// Redux
import PropTypes from "prop-types";
import { bindActionCreators } from "redux";
import { connect } from "react-redux";

// Material UI
import TextField from "@material-ui/core/TextField";
import Button from "@material-ui/core/Button";
import Select from "@material-ui/core/Select";
import MenuItem from "@material-ui/core/MenuItem";
import InputLabel from "@material-ui/core/InputLabel";
import FormControl from "@material-ui/core/FormControl";

// Custom Actions


// START IMPORT ACTIONS
import ServiseActions from "../redux/actions/ServiseActions";
import RoomActions from "../redux/actions/RoomActions";

// END IMPORT ACTIONS

/** APIs

* actionsServise.create
*	@description CRUD ACTION create
*	@param servise obj - Object to insert
*
* actionsServise.get
*	@description CRUD ACTION get
*	@param ObjectId id - Id servise
*	@returns servise
*
* actionsRoom.list
*	@description CRUD ACTION list
*	@returns ARRAY OF room
*
* actionsServise.update
*	@description CRUD ACTION update
*	@param ObjectId id - Id servise
*	@returns servise
*

**/

class ServiseEdit extends Component {
  // Init servise
  constructor(props) {
    super(props);
    this.state = {
      servise: {}
    };
  }

  // Load data on start
  componentDidMount() {
    if (this.props.match.params.id !== "new") {
      this.props.actionsServise.loadServise(this.props.match.params.id);
    }
    
    this.props.actionsRoom.loadRoomList();
  }

  // Insert props servise in state
  componentWillReceiveProps(props) {
    this.setState(...this.state, {
      servise: props.servise
    });
  }

  // Save data
  save(event) {
    event.preventDefault();
    if (this.state.servise._id) {
      this.props.actionsServise.saveServise(this.state.servise).then(data => {
        this.props.history.push("/servises/");
      });
    } else {
      this.props.actionsServise.createServise(this.state.servise).then(data => {
        this.props.history.push("/servises/");
      });
    }
  }

  // Show content
  render() {
    return (
      <div>
        <h1>Servise Edit</h1>
        <form className="myForm" onSubmit={this.save.bind(this)}>

          
          <TextField
            id="nameservise"
            label="Nameservise"
            value={this.state.servise.nameservise || ""}
            onChange={Utils.handleChange.bind(this, "servise")}
            margin="normal"
            fullWidth
          />
          
          
          <TextField
            id="salary"
            label="Salary"
            value={this.state.servise.salary || ""}
            onChange={Utils.handleChange.bind(this, "servise")}
            type="number"
            margin="normal"
            fullWidth
          />
          
          {/* RELATIONS */}

          <h2 className="mb-20">Relations</h2>
          
          {/* Relation 1:m idservise with room */}
          
          <FormControl fullWidth className="mb-20">
            <InputLabel shrink htmlFor="idservise">
              Idservise
            </InputLabel>
            <Select
              value={this.state.servise.idservise || ""}
              onChange={Utils.handleChangeSelect.bind(this, "servise")}
              inputProps={{
                id: "idservise",
                name: "idservise"
              }}
              fullWidth
            >
              <MenuItem value="">
                <em>None</em>
              </MenuItem>
              {this.props.listRoom && this.props.listRoom.map(row => (
                <MenuItem value={row._id} key={row._id}>
                  {row._id}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
          
          
          {/* Footer */}
          <div className="footer-card">
            <Link to="/servises/">Back to list</Link>

            <Button type="submit" variant="contained" color="primary">
              Save
            </Button>
          </div>
        </form>
      </div>
    );
  }
}

// Store actions
const mapDispatchToProps = function(dispatch) {
  return { 
    actionsServise: bindActionCreators(ServiseActions, dispatch),
    actionsRoom: bindActionCreators(RoomActions, dispatch),
  };
};

// Validate types
ServiseEdit.propTypes = { 
  actionsServise: PropTypes.object.isRequired,
  actionsRoom: PropTypes.object.isRequired,
};

// Get props from state
function mapStateToProps(state, ownProps) {
  return {
    servise: state.ServiseEditReducer.servise,
    listRoom: state.ServiseEditReducer.listRoom
  };
}

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(ServiseEdit);
