/* 
* Generated by
* 
*      _____ _          __  __      _     _
*     / ____| |        / _|/ _|    | |   | |
*    | (___ | | ____ _| |_| |_ ___ | | __| | ___ _ __
*     \___ \| |/ / _` |  _|  _/ _ \| |/ _` |/ _ \ '__|
*     ____) |   < (_| | | | || (_) | | (_| |  __/ |
*    |_____/|_|\_\__,_|_| |_| \___/|_|\__,_|\___|_|
*
* The code generator that works in many programming languages
*
*			https://www.skaffolder.com
*
*
* You can generate the code from the command-line
*       https://npmjs.com/package/skaffolder-cli
*
*       npm install -g skaffodler-cli
*
*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *
*
* To remove this comment please upgrade your plan here: 
*      https://app.skaffolder.com/#!/upgrade
*
* Or get up to 70% discount sharing your unique link:
*       https://app.skaffolder.com/#!/register?friend=5dbfae239ef7a1181f8e04d2
*
* You will get 10% discount for each one of your friends
* 
*/
// Dependencies
import React, { Component } from "react";
import { Link } from "react-router-dom";
import Utils from "../utils/utils";

// Redux
import PropTypes from "prop-types";
import { bindActionCreators } from "redux";
import { connect } from "react-redux";

// Material UI
import TextField from "@material-ui/core/TextField";
import Button from "@material-ui/core/Button";

// Custom Actions


// START IMPORT ACTIONS
import CostomerActions from "../redux/actions/CostomerActions";
import RoomActions from "../redux/actions/RoomActions";

// END IMPORT ACTIONS

/** APIs

* actionsCostomer.create
*	@description CRUD ACTION create
*	@param costomer obj - Object to insert
*
* actionsRoom.findBycoderoom
*	@description CRUD ACTION findBycoderoom
*	@param Objectid key - Id della risorsa coderoom da cercare
*
* actionsCostomer.get
*	@description CRUD ACTION get
*	@param ObjectId id - Id costomer
*	@returns costomer
*
* actionsCostomer.update
*	@description CRUD ACTION update
*	@param ObjectId id - Id costomer
*	@returns costomer
*

**/

class CostomerEdit extends Component {
  // Init costomer
  constructor(props) {
    super(props);
    this.state = {
      costomer: {}
    };
  }

  // Load data on start
  componentDidMount() {
    if (this.props.match.params.id !== "new") {
      this.props.actionsCostomer.loadCostomer(this.props.match.params.id);
      this.props.actionsRoom.findBycoderoom(this.props.match.params.id);
    }
    
  }

  // Insert props costomer in state
  componentWillReceiveProps(props) {
    this.setState(...this.state, {
      costomer: props.costomer
    });
  }

  // Save data
  save(event) {
    event.preventDefault();
    if (this.state.costomer._id) {
      this.props.actionsCostomer.saveCostomer(this.state.costomer).then(data => {
        this.props.history.push("/costomers/");
      });
    } else {
      this.props.actionsCostomer.createCostomer(this.state.costomer).then(data => {
        this.props.history.push("/costomers/");
      });
    }
  }

  // Show content
  render() {
    return (
      <div>
        <h1>Costomer Edit</h1>
        <form className="myForm" onSubmit={this.save.bind(this)}>

          
          <TextField
            id="age"
            label="Age"
            value={this.state.costomer.age || ""}
            onChange={Utils.handleChange.bind(this, "costomer")}
            type="number"
            margin="normal"
            fullWidth
          />
          
          
          <TextField
            id="card"
            label="Card"
            value={this.state.costomer.card || ""}
            onChange={Utils.handleChange.bind(this, "costomer")}
            type="number"
            margin="normal"
            fullWidth
          />
          
          
          <TextField
            id="coderoom"
            label="Coderoom"
            value={this.state.costomer.coderoom || ""}
            onChange={Utils.handleChange.bind(this, "costomer")}
            type="number"
            type="decimal"
            margin="normal"
            fullWidth
          />
          
          
          <TextField
            id="gender"
            label="Gender"
            value={this.state.costomer.gender || ""}
            onChange={Utils.handleChange.bind(this, "costomer")}
            margin="normal"
            fullWidth
          />
          
          
          <TextField
            id="namcostomer"
            label="Namcostomer"
            value={this.state.costomer.namcostomer || ""}
            onChange={Utils.handleChange.bind(this, "costomer")}
            margin="normal"
            fullWidth
          />
          
          
          <TextField
            id="nationality"
            label="Nationality"
            value={this.state.costomer.nationality || ""}
            onChange={Utils.handleChange.bind(this, "costomer")}
            margin="normal"
            fullWidth
          />
          
          
          <TextField
            id="phonenumber"
            label="Phonenumber"
            value={this.state.costomer.phonenumber || ""}
            onChange={Utils.handleChange.bind(this, "costomer")}
            type="number"
            margin="normal"
            fullWidth
          />
          
          {/* RELATIONS */}

          {/* EXTERNAL RELATIONS */}
          
          {/* External relation with room */}
          
          <h3>Room</h3>
          {(!this.props.listRoom || this.props.listRoom.length === 0) && 
            <div>No Room associated</div>
          }
          {this.props.listRoom &&
            this.props.listRoom.map((item, i) => {
              return (
                <Link to={"/rooms/" + item._id} key={item._id}>
                  {item._id}
                </Link>
              );
            })}

          
          {/* Footer */}
          <div className="footer-card">
            <Link to="/costomers/">Back to list</Link>

            <Button type="submit" variant="contained" color="primary">
              Save
            </Button>
          </div>
        </form>
      </div>
    );
  }
}

// Store actions
const mapDispatchToProps = function(dispatch) {
  return { 
    actionsCostomer: bindActionCreators(CostomerActions, dispatch),
    actionsRoom: bindActionCreators(RoomActions, dispatch),
  };
};

// Validate types
CostomerEdit.propTypes = { 
  actionsCostomer: PropTypes.object.isRequired,
  actionsRoom: PropTypes.object.isRequired,
};

// Get props from state
function mapStateToProps(state, ownProps) {
  return {
    costomer: state.CostomerEditReducer.costomer,
    listRoom: state.CostomerEditReducer.listRoom
  };
}

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(CostomerEdit);
